1. Implement Minimax
2. Create a test program
3. Train heuristic

# after 110 turns, prioritize middle position due to board shrink
# after 180 turns, same as above


game notes

OPTIMISATIONS
bitboards
transposition table: can be used to store expanded moves, since the opponent is likely to play the move that's expanded, it would sav time
numpy array
class __slots__
minimax (alpha-beta)




//////////////////////////////////////CHIRAG

OPTIMISATIONS
bitboards
transposition table




EVALUATION features

play depth first search towards end of game



PLACEMENT
- assigning values and sort by best position
- aggressive if free kill (e.g. black piece next to white piece)



X - - - - - - X
- - - - - - - - ///////////////////////////////////////////////
- - - - - - - P
O - - - - - - -
P - - - - - - -
- - - - - - - -
- - - - - - - - *//////////////////////////////////////////////
X - - - - - - X *

POS VALUES (Descending) exactly 12 placements
(3,1) = (3,8) = 999


loop counter to save 2 moves for the PRESERVATION
FROM HERE: check positions below(free+not eliminated), in-danger(place), look for free kill (order priority)
(5,1) = (5,8) = 998
(conditional between row 5,6)
(6,1) = (6,8) = 997

limit elimination to 3 pieces



SCORE neighbouring piece => assign accordingly (8-queens attacks possible)

preserve 2 pieces for:
(1,3) = (1,6) = 1


evaluation function based on above three conditions????
- training it?
