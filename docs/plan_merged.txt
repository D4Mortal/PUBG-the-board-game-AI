1. Implement Minimax
2. Create a test program
3. Train heuristic

# after 110 turns, prioritize middle position due to board shrink
# after 180 turns, same as above


game notes

OPTIMISATIONS
bitboards
transposition table: can be used to store expanded moves, since the opponent is likely to play the move that's expanded, it would sav time
numpy array
class __slots__
minimax (alpha-beta)




//////////////////////////////////////CHIRAG

OPTIMISATIONS
bitboards
transposition table
negamax

disable eval towards end of game





EVALUATION features
piece-square tables





PLACEMENT
- assigning values and sort by best position
- aggressive if free kill (e.g. black piece next to white piece)



X - P - - P - X
- - - - - - - - ///////////////////////////////////////////////
P - - - - - - P
- - - - - - - -
P - - - - - - P
P - - - - - - P
- - - - - - - - *//////////////////////////////////////////////
X - - - - - - X *



X - - - - - - X
- - - - - - - - ///////////////////////////////////////////////
P - - - - - - P
P - - - - - - P
- - - - - - - -
P - - - - - - P
- - - - - - - - *//////////////////////////////////////////////
X - P - - P - X *



POS VALUES (Descending) exactly 12 placements
(3,1) = (3,8) = 999


loop counter to save 2 moves for the PRESERVATION
FROM HERE: check positions below(free+not eliminated), in-danger(place), look for free kill (order priority)
(5,1) = (5,8) = 998
(conditional between row 5,6)
(6,1) = (6,8) = 997

limit elimination to 3 pieces



SCORE neighbouring piece => assign accordingly (8-queens attacks possible)

preserve 2 pieces for:
(1,3) = (1,6) = 1


evaluation function based on above three conditions????
- training it?




mobility

legal moves white - legal moves black
(safe mobility)


 A study by Eliot Slater of 350 tournament games in which the material balance was still even after the 20th move showed a definite correlation between a player's mobility and the number of games won [1] .


Freedom and Papa both use mobility as their primary term in their evaluation functions. As with Wita, both use the ratio of computer's moves / opponent moves. Papa and Wita also multiply by the ratio of the squares controlled and Papa goes one step further and takes the logarithm of this product to form the "entropy" of the position. The true merit of this entropy over the product ratio was not made clear, but it does ensure that in extreme situations the evaluation remains more closely bounded.


center control
https://chessprogramming.wikispaces.com/Center%20Control

Trapped Pieces


lazy evaluation - calculate cheap first then more if necessary

Isolated pawns (pawns with nothing around them) are not good


